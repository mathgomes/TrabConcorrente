#include <stdbool.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

void leitura(int *ordem, int *fila, double *erro, double *iteracao){
    scanf("%d %d %lf %d", ordem, fila, erro, iteracao);
}

double **leituraMa(int ordem){
    double **a;
    int i, j;

    a = (double**) malloc(ordem*sizeof(double*));
    for(i=0;i<ordem;++i){
        a[i] = (double*) malloc(ordem*sizeof(double));
        for(j=0;j<ordem;++j){
            scanf("%lf", &a[i][j]);

        }
    }
    return a;
}

double *leituraMb(int ordem){
    double *b;
    int j;

    b = (double*) malloc(ordem*sizeof(double));
    for(j=0;j<ordem;++j){
        scanf("%lf", &b[j]);
    }
    return b;
}

double *criaVInicio(double **a, double *b, int ordem){
    double *result;
    int i;

    result = (double*) malloc(ordem*sizeof(double));
    for(i=0;i<ordem;++i){
        result[i] = 0;
    }

    return result;
}

void jacobi_richardson(double **a, double *b, double *vetorInicio, int ordem, int fila, int iteracao, double erro){
    int i=0, j=0, converge=0, k=0;
    double soma, res = 0, maiorDif, maiorValor, dif, *result, *vetAux;

    //Criando o vetor que conterá os resultados.
    result = (double*) malloc(ordem*sizeof(double));
    vetAux = (double*) malloc(ordem*sizeof(double));

    //Verifica se o sistema irá convergir. A variável 'fila' é a linha da matriz em que testará o processo
    for(i=0;i<ordem;++i){
        soma=0;
       for(j=0;j<ordem;++j){
            if(i!=j){
                soma = soma + fabs(a[i][j]);
                a[i][j] = a[i][j]/a[i][i];
            }

       }
       if(soma < a[i][i]){
            converge++;
       }
       b[i] = b[i]/a[i][i];
       a[i][i] = 1;
    }

    //faz result receber o vetorInicio.
    if(converge==ordem){
        while(k<iteracao){
            maiorDif = -100000;
            maiorValor = -100000;
            for(i=0;i<ordem;++i){
                soma=0;
                for(j=0;j<ordem;++j){
                    if(i!=j){
                        soma += -(a[i][j]*vetorInicio[j]);
                    }
                }
                soma += b[i];

                //quarda os valores dos Xi.
                result[i] = soma;
                //guarda o maior valor dentre a diferença dos atuais Xi e os da interação anterior.
                if(maiorDif < fabs(result[i]-vetorInicio[i])){
                    maiorDif = fabs(result[i]-vetorInicio[i]);
                }
                //guarda o maior valor dentre os atuais Xi.
                if(maiorValor < fabs(result[i])){
                    maiorValor = fabs(result[i]);
                }
                vetAux[i] = result[i];
            }

            for(i=0;i<ordem;++i){
                vetorInicio[i] = vetAux[i];
            }

            //subtrai em modulo o atual valor da posição result pelo valor anterior. Tudo isso divide pelo modulo do atual valor da posicao result.
            dif = maiorDif / maiorValor;
            //printf("DIF: %lf\n", dif);
            k++;
            //compara para ver se é menor que o erro.
            if(dif <= erro){
                break;
            }
        }
        soma=0;
        for(i=0;i<ordem;++i){
            soma += a[fila][i]*result[i];
        }
        printf("Valor Fila: %lf = %lf\n", soma, b[fila]);
        printf("Iteracoes: %d", k);
    }
}

int main(){
    double erro, **a, *b, *vetorInicio;
    int i, j, fila, ordem, iteracao;

    leitura(&ordem, &fila, &erro, &iteracao);

    a = leituraMa(ordem);
    b = leituraMb(ordem);

    vetorInicio = criaVInicio(a, b, ordem);
    jacobi_richardson(a, b, vetorInicio, ordem, fila, iteracao, erro);
}
